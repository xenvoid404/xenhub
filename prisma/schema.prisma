generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Subscriber
  Contributor
  Author
  Editor
  Administrator
}

enum PostStatus {
  Draft
  Pending
  Scheduled
  Published
  Archived
  Trash
}

model User {
  id              String          @id @default(cuid())
  name            String?
  username        String?         @unique
  email           String?         @unique
  emailVerifiedAt DateTime?       @map("email_verified_at")
  image           String?
  role            UserRole        @default(Subscriber)
  accounts        Account[]
  sessions        Session[]
  authenticators  Authenticator[]
  Post            Post[]
  Comment         Comment[]
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Account {
  id                    String   @id @default(cuid())
  userId                String   @map("user_id")
  type                  String
  provider              String
  providerAccountId     String   @map("provider_account_id")
  refreshToken          String?  @map("refresh_token") @db.Text
  accessToken           String?  @map("access_token") @db.Text
  expiresAt             Int?     @map("expires_at")
  tokenType             String?  @map("token_type")
  scope                 String?
  idToken               String?  @map("id_token") @db.Text
  sessionState          String?  @map("session_state")
  refreshTokenExpiresIn Int?     @map("refresh_token_expires_in")
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@unique([sessionToken])
  @@index([userId])
  @@map("sessions")
}

model Authenticator {
  credentialId         String   @map("credential_id")
  userId               String   @map("user_id")
  providerAccountId    String   @map("provider_account_id")
  credentialPublicKey  String   @map("credential_public_key")
  counter              Int
  credentialDeviceType String   @map("credential_device_type")
  credentialBackedUp   Boolean  @map("credential_backed_up")
  transports           String?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  @@id([credentialId])
  @@unique([credentialId])
  @@map("authenticators")
}

model Category {
  id          String        @id @default(cuid())
  name        String        @db.VarChar(100)
  slug        String
  posts       Post[]
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  SubCategory SubCategory[]

  @@unique([name, slug])
  @@map("categories")
}

model SubCategory {
  id         String   @id @default(cuid())
  categoryId String   @map("category_id")
  name       String
  slug       String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  posts      Post[]
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([name, slug])
  @@map("sub_categories")
}

model Post {
  id            String       @id @default(cuid())
  userId        String       @map("user_id")
  categoryId    String       @map("category_id")
  subCategoryId String?      @map("sub_category_id")
  title         String
  slug          String
  content       String       @db.LongText
  status        PostStatus   @default(Draft)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  category      Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  comments      Comment[]
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")

  @@unique([slug])
  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  postId    String   @map("post_id")
  content   String   @db.VarChar(500)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}
